@page "/refueling/{CarId:int}/edit/{RefuelingId:int}"
@using Caarro.Data
@using Caarro.Services
@inject NavigationManager _NavigationManager
@inject RefuelingService _RefuelingService

<PageTitle>Caarro - Edit Refueling</PageTitle>
<h3>EditRefueling</h3>

@if (_refueling is null)
{
    
}
else
{
    <EditForm Model="@_refueling" OnSubmit="@SubmitRefuelingUpdate">
        <InputNumber id="odometer" placeholder="Odometer" @bind-Value="@_refueling.Odometer"/>
        <InputNumber id="price" placeholder="Total Price" @bind-Value="@_refueling.Price"/>
        Full Tank:
        <InputCheckbox id="tofull" CurrentValue="true" @bind-Value="_refueling.ToFull"/>
        <InputText id="location" placeholder="Location Name" @bind-Value="@_refueling.Location"/>
        <InputText id="drive" placeholder="Driver Name" @bind-Value="@_refueling.Driver"/>
        <InputSelect id="fuel" placeholder="Fuel Type" @bind-Value="@_refueling.Fuel">
            @foreach (var fuel in Enum.GetValues(typeof(FuelType)))
            {
                <option value="@fuel">@fuel</option>
            }
        </InputSelect>
    
        <button type="submit">Update</button>
    </EditForm>

    <button type="submit" onclick="@SubmitRefuelingDelete">Delete</button>
}

@code {
    [Parameter]
    public int CarId { get; set; }
    [Parameter]
    public int RefuelingId { get; set; }

    private Refueling? _refueling;

    private async Task SubmitRefuelingUpdate()
    {
        await _RefuelingService.UpdateRefuelingAsync(_refueling!, CancellationToken);
        _NavigationManager.NavigateTo($"/refueling/{CarId}/");
    }

    private async Task SubmitRefuelingDelete()
    {
        await _RefuelingService.DeleteRefuelingAsync(_refueling!, CancellationToken);
        _NavigationManager.NavigateTo($"/refueling/{CarId}/");
    }

    protected override async Task OnInitializedAsync()
    {
        _refueling = await _RefuelingService.GetRefuelingAsync(RefuelingId, CancellationToken);
    }

}
