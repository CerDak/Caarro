@page "/Car/{CarId:int}"
@using Caarro.Data
@using Caarro.Services
@inject RefuelingService RefuelingService
@inject ServicesService ServicesService

<PageTitle>Caarro - Detail</PageTitle>

<MudContainer>
    <MudPaper Elevation="1">
        <MudDataGrid T="Refueling" Items="_refuelings" ReadOnly Bordered>
            <Columns>
                <PropertyColumn Property="x => x.Odometer"/>
                <PropertyColumn Property="x => x.Price"/>
                <PropertyColumn Property="x => x.FuelAmount" Title="Fuel Amount"/>
                <PropertyColumn Property="x => x.ToFull"/>
                <PropertyColumn Property="x => x.Driver"/>
                <PropertyColumn Property="x => x.Location"/>
                <PropertyColumn Property="x => x.Date"/>
            </Columns>
        </MudDataGrid>        
    </MudPaper>
    <MudPaper Elevation="1">
        <MudDataGrid T="Service" Items="_services" ReadOnly Bordered>
            <Columns>
                <PropertyColumn Property="x => x.Odometer"/>
                <PropertyColumn Property="x => x.Amount"/>
                <PropertyColumn Property="x => x.Type"/>
                <PropertyColumn Property="x => x.Driver"/>
                <PropertyColumn Property="x => x.Location"/>
                <PropertyColumn Property="x => x.Date"/>
            </Columns>
        </MudDataGrid>
    </MudPaper>
</MudContainer>

@code {
    [Parameter]
    public int CarId { get; set; }
    
    IEnumerable<Refueling>? _refuelings;
    IEnumerable<Service>? _services;

    protected override async Task OnInitializedAsync()
    {
        _refuelings = await RefuelingService.GetAllRefuelingsAsync(CarId);
        _services = await ServicesService.GetAllServicesAsync(CarId);
    }
}
