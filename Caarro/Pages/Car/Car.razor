@page "/Car/{CarId:int}"
@using Caarro.Data
@using Caarro.Services
@inject RefuelingService RefuelingService
@inject ServicesService ServicesService

<PageTitle>Caarro - Detail</PageTitle>

<MudPaper Elevation="3">
    <MudText Typo="Typo.h4" Style="text-align: center">Fueling History</MudText>
    <MudDataGrid T="Refueling" Items="_refuelings" ReadOnly Bordered Elevation="0">
        <Columns>
            <PropertyColumn Property="x => x.Odometer"/>
            <PropertyColumn Property="x => x.Price"/>
            <PropertyColumn Property="x => x.FuelAmount" Title="Fuel Amount"/>
            <PropertyColumn Property="x => x.ToFull"/>
            <PropertyColumn Property="x => x.Driver"/>
            <PropertyColumn Property="x => x.Location"/>
            <PropertyColumn Property="x => x.Date"/>
        </Columns>
    </MudDataGrid>
</MudPaper>

<MudPaper Elevation="3" Style="margin-top: 1.5em">
    <MudText Typo="Typo.h4" Style="text-align: center">Service History</MudText>
    <MudDataGrid T="Service" Items="_services" ReadOnly Bordered Elevation="0">
        <Columns>
            <PropertyColumn Property="x => x.Odometer"/>
            <PropertyColumn Property="x => x.Amount"/>
            <PropertyColumn Property="x => x.Type"/>
            <PropertyColumn Property="x => x.Driver"/>
            <PropertyColumn Property="x => x.Location"/>
            <PropertyColumn Property="x => x.Date"/>
        </Columns>
    </MudDataGrid>
</MudPaper>

@code {
    [Parameter]
    public int CarId { get; set; }
    
    IEnumerable<Refueling>? _refuelings;
    IEnumerable<Service>? _services;

    protected override async Task OnInitializedAsync()
    {
        _refuelings = await RefuelingService.GetAllRefuelingsAsync(CarId, CancellationToken);
        _services = await ServicesService.GetAllServicesAsync(CarId, CancellationToken);
    }
}
