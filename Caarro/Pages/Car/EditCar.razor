@page "/car/edit/{CarId:int}"
@using Caarro.Data
@using Caarro.Services
@inject NavigationManager _NavigationManager
@inject VehicleService _VehicleService

<PageTitle>Caarro - Edit Car</PageTitle>
<h1>Edit Car</h1>

@if (_vehicle is null)
{
    
}
else
{
    <EditForm Model="@_vehicle" OnSubmit="@SubmitVehicleUpdate">
        <InputText id="name" placeholder="Name" @bind-Value="_vehicle.Name"/>
        <InputNumber id="year" placeholder="Year" @bind-Value="_vehicle.Year" min="1886" max="9999"/>
        <InputText id="manufacturer" placeholder="Manufacturer" @bind-Value="_vehicle.Manufacturer"/>
        <InputText id="model" placeholder="Model" @bind-Value="_vehicle.Model"/>
        <InputNumber id="fuelCapacity" placeholder="Fuel Capacity" @bind-Value="_vehicle.FuelCapacity" min="0" max="9999"/>
        <InputText id="licensePlate" placeholder="License Plate Number" @bind-Value="_vehicle.LicensePlate"/>
        <InputText id="vin" placeholder="VIN" @bind-Value="_vehicle.VehicleIdentificationNumber"/>
        <InputSelect id="fuelType" @bind-Value="_vehicle.FuelType">
            @foreach (var fuel in Enum.GetValues(typeof(FuelType)))
            {
                <option value="@fuel">@fuel</option>
            }
        </InputSelect>
        <InputSelect id="unitOfMeasure" @bind-Value="_vehicle.UnitOfMeasure">
            @foreach (var unit in Enum.GetValues(typeof(UnitOfMeasure)))
            {
                <option value="@unit">@unit</option>
            }
        </InputSelect>

        <button type="submit">Update</button>
    </EditForm>
    <button type="submit" onclick="">Delete</button>
}

@code {
    [Parameter]
    public int CarId { get; set; }
    private Vehicle? _vehicle;

    private async Task SubmitVehicleUpdate()
    {
        await _VehicleService.UpdateVehicleAsync(_vehicle!);
        _NavigationManager.NavigateTo($"/car/{CarId}");
    }

    private async Task SubmitVehicleDelete()
    {
        await _VehicleService.DeleteVehicleAsync(_vehicle!);
        _NavigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        _vehicle = await _VehicleService.GetVehicleAsync(CarId);
    }
}